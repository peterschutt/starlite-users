{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Starlite-Users documentation","text":"<p>Starlite-Users is an authentication, authorization and user management package for Starlite v1.43.0 and above.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Supports Session, JWT and JWTCookie authentication backends</li> <li>Authorization via role based guards</li> <li>Pre-configured route handlers for:</li> <li>Authentication</li> <li>Registration</li> <li>Verification</li> <li>Password reset</li> <li>Administrative user management (read, update, delete)</li> <li>Administrative role management (read, update, delete)</li> <li>Assignment/revocation of roles to/from users</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p><code>pip install starlite-users</code></p>"},{"location":"#full-example","title":"Full example","text":"<p>An example application can be viewed here.</p>"},{"location":"reference/0-config/","title":"Starlite-Users Configuration","text":""},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig","title":"starlite_users.config.StarliteUsersConfig  <code>dataclass</code>","text":"<p>         Bases: <code>Generic[UserModelType]</code></p> <p>Configuration class for StarliteUsers.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.auth_exclude_paths","title":"auth_exclude_paths  <code>class-attribute</code>","text":"<pre><code>auth_exclude_paths: list[str] = field(default_factory=lambda : ['/schema'])\n</code></pre> <p>Paths to be excluded from authentication checks.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.auth_backend","title":"auth_backend  <code>class-attribute</code>","text":"<pre><code>auth_backend: Literal['session', 'jwt', 'jwt_cookie']\n</code></pre> <p>The authentication backend to use by Starlite.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.secret","title":"secret  <code>class-attribute</code>","text":"<pre><code>secret: SecretStr\n</code></pre> <p>Secret string for securely signing tokens.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.hash_schemes","title":"hash_schemes  <code>class-attribute</code>","text":"<pre><code>hash_schemes: list[str] = field(default_factory=lambda : ['bcrypt'])\n</code></pre> <p>Schemes to use for password encryption.</p> <p>Defaults to <code>['bcrypt']</code></p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.session_backend_config","title":"session_backend_config  <code>class-attribute</code>","text":"<pre><code>session_backend_config: BaseBackendConfig | None = None\n</code></pre> <p>Optional backend configuration for session based authentication.</p> Notes <ul> <li>Required if <code>auth_backend</code> is set to <code>session</code>.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.user_model","title":"user_model  <code>class-attribute</code>","text":"<pre><code>user_model: type[UserModelType]\n</code></pre> <p>A subclass of a <code>User</code> ORM model.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.user_create_dto","title":"user_create_dto  <code>class-attribute</code>","text":"<pre><code>user_create_dto: type[BaseUserCreateDTO] = BaseUserCreateDTO\n</code></pre> <p>A subclass of BaseUserCreateDTO.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.user_read_dto","title":"user_read_dto  <code>class-attribute</code>","text":"<pre><code>user_read_dto: type[BaseUserReadDTO] = BaseUserReadDTO\n</code></pre> <p>A subclass of BaseUserReadDTO.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.user_update_dto","title":"user_update_dto  <code>class-attribute</code>","text":"<pre><code>user_update_dto: type[BaseUserUpdateDTO] = BaseUserUpdateDTO\n</code></pre> <p>A subclass of BaseUserUpdateDTO.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.role_model","title":"role_model  <code>class-attribute</code>","text":"<pre><code>role_model: type[SQLAlchemyRoleMixin] = SQLAlchemyRoleMixin\n</code></pre> <p>A subclass of a <code>Role</code> ORM model.</p> Notes <ul> <li>Required if <code>role_management_handler_config</code> is set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.role_create_dto","title":"role_create_dto  <code>class-attribute</code>","text":"<pre><code>role_create_dto: type[BaseRoleCreateDTO] = BaseRoleCreateDTO\n</code></pre> <p>A subclass of BaseRoleCreateDTO.</p> Notes <ul> <li>Required if <code>role_management_handler_config</code> is set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.role_read_dto","title":"role_read_dto  <code>class-attribute</code>","text":"<pre><code>role_read_dto: type[BaseRoleReadDTO] = BaseRoleReadDTO\n</code></pre> <p>A subclass of BaseRoleReadDTO.</p> Notes <ul> <li>Required if <code>role_management_handler_config</code> is set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.role_update_dto","title":"role_update_dto  <code>class-attribute</code>","text":"<pre><code>role_update_dto: type[BaseRoleUpdateDTO] = BaseRoleUpdateDTO\n</code></pre> <p>A subclass of BaseRoleUpdateDTO.</p> Notes <ul> <li>Required if <code>role_management_handler_config</code> is set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.user_service_class","title":"user_service_class  <code>class-attribute</code>","text":"<pre><code>user_service_class: type[BaseUserService]\n</code></pre> <p>A subclass of BaseUserService.</p>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.auth_handler_config","title":"auth_handler_config  <code>class-attribute</code>","text":"<pre><code>auth_handler_config: AuthHandlerConfig | None = None\n</code></pre> <p>Optional instance of AuthHandlerConfig. If set, registers the route handler(s) on the app.</p> Note <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.current_user_handler_config","title":"current_user_handler_config  <code>class-attribute</code>","text":"<pre><code>current_user_handler_config: CurrentUserHandlerConfig | None = None\n</code></pre> <p>Optional current-user route handler configuration. If set, registers the route handler(s) on the app.</p> Note <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.password_reset_handler_config","title":"password_reset_handler_config  <code>class-attribute</code>","text":"<pre><code>password_reset_handler_config: PasswordResetHandlerConfig | None = None\n</code></pre> <p>Optional password reset route handler configuration. If set, registers the route handler(s) on the app.</p> Note <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.register_handler_config","title":"register_handler_config  <code>class-attribute</code>","text":"<pre><code>register_handler_config: RegisterHandlerConfig | None = None\n</code></pre> <p>Optional registration/signup route handler configuration. If set, registers the route handler(s) on the app.</p> Note <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.role_management_handler_config","title":"role_management_handler_config  <code>class-attribute</code>","text":"<pre><code>role_management_handler_config: RoleManagementHandlerConfig | None = None\n</code></pre> <p>Optional role management route handler configuration. If set, registers the route handler(s) on the app.</p> Note <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.user_management_handler_config","title":"user_management_handler_config  <code>class-attribute</code>","text":"<pre><code>user_management_handler_config: UserManagementHandlerConfig | None = None\n</code></pre> <p>Optional user management route handler configuration. If set, registers the route handler(s) on the app.</p> Note <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/0-config/#starlite_users.config.StarliteUsersConfig.verification_handler_config","title":"verification_handler_config  <code>class-attribute</code>","text":"<pre><code>verification_handler_config: VerificationHandlerConfig | None = None\n</code></pre> <p>Optional user verification route handler configuration. If set, registers the route handler(s) on the app.</p> Note <ul> <li>At least one route handler config must be set.</li> </ul>"},{"location":"reference/1-user-service/","title":"User Service","text":""},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService","title":"starlite_users.service.BaseUserService","text":"<p>         Bases: <code>Generic[UserModelType, UserCreateDTOType, UserUpdateDTOType, RoleModelType]</code></p> <p>Main user management interface.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.__init__","title":"__init__","text":"<pre><code>__init__(repository, secret, hash_schemes)\n</code></pre> <p>User service constructor.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>SQLAlchemyUserRepository[UserModelType, RoleModelType]</code> <p>A <code>UserRepository</code> instance</p> required <code>secret</code> <code>SecretStr</code> <p>Secret string for securely signing tokens.</p> required <code>hash_schemes</code> <code>Sequence[str] | None</code> <p>Schemes to use for password encryption.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.add_user","title":"add_user  <code>async</code>","text":"<pre><code>add_user(data, process_unsafe_fields=False)\n</code></pre> <p>Create a new user programmatically.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>UserCreateDTOType</code> <p>User creation data transfer object.</p> required <code>process_unsafe_fields</code> <code>bool</code> <p>If True, set <code>is_active</code> and <code>is_verified</code> attributes as they appear in <code>data</code>, otherwise always set their defaults.</p> <code>False</code>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.register","title":"register  <code>async</code>","text":"<pre><code>register(data)\n</code></pre> <p>Register a new user and optionally run custom business logic.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>UserCreateDTOType</code> <p>User creation data transfer object.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.get_user","title":"get_user  <code>async</code>","text":"<pre><code>get_user(id_)\n</code></pre> <p>Retrieve a user from the database by id.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID</code> <p>UUID corresponding to a user primary key.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.get_user_by","title":"get_user_by  <code>async</code>","text":"<pre><code>get_user_by(**kwargs)\n</code></pre> <p>Retrieve a user from the database by arbitrary keyword arguments.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Keyword arguments to pass as filters.</p> <code>{}</code> <p>Examples:</p> <pre><code>service = UserService(...)\njohn = await service.get_user_by(email=\"john@example.com\")\n</code></pre>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.update_user","title":"update_user  <code>async</code>","text":"<pre><code>update_user(id_, data)\n</code></pre> <p>Update arbitrary user attributes in the database.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID</code> <p>UUID corresponding to a user primary key.</p> required <code>data</code> <code>UserUpdateDTOType</code> <p>User update data transfer object.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.delete_user","title":"delete_user  <code>async</code>","text":"<pre><code>delete_user(id_)\n</code></pre> <p>Delete a user from the database.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID</code> <p>UUID corresponding to a user primary key.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.authenticate","title":"authenticate  <code>async</code>","text":"<pre><code>authenticate(data)\n</code></pre> <p>Authenticate a user.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>UserAuthSchema</code> <p>User authentication data transfer object.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.generate_token","title":"generate_token","text":"<pre><code>generate_token(user_id, aud)\n</code></pre> <p>Generate a limited time valid JWT.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>UUID</code> <p>UUID of the user to provide the token to.</p> required <code>aud</code> <code>str</code> <p>Context of the token</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.initiate_verification","title":"initiate_verification  <code>async</code>","text":"<pre><code>initiate_verification(user)\n</code></pre> <p>Initiate the user verification flow.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserModelType</code> <p>The user requesting verification.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.send_verification_token","title":"send_verification_token  <code>async</code>","text":"<pre><code>send_verification_token(user, token)\n</code></pre> <p>Execute custom logic to send the verification token to the relevant user.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserModelType</code> <p>The user requesting verification.</p> required <code>token</code> <code>str</code> <p>An encoded JWT bound to verification.</p> required <p>Notes: - Develepors need to override this method to facilitate sending the token via email, sms etc.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.verify","title":"verify  <code>async</code>","text":"<pre><code>verify(encoded_token)\n</code></pre> <p>Verify a user with the given JWT.</p> <p>Parameters:</p> Name Type Description Default <code>encoded_token</code> <code>str</code> <p>An encoded JWT bound to verification.</p> required <p>Raises:</p> Type Description <code>InvalidTokenException</code> <p>If the token is expired or tampered with.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.initiate_password_reset","title":"initiate_password_reset  <code>async</code>","text":"<pre><code>initiate_password_reset(email)\n</code></pre> <p>Initiate the password reset flow.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>Email of the user who has forgotten their password.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.send_password_reset_token","title":"send_password_reset_token  <code>async</code>","text":"<pre><code>send_password_reset_token(user, token)\n</code></pre> <p>Execute custom logic to send the password reset token to the relevant user.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserModelType</code> <p>The user requesting the password reset.</p> required <code>token</code> <code>str</code> <p>An encoded JWT bound to the password reset flow.</p> required <p>Notes: - Develepors need to override this method to facilitate sending the token via email, sms etc.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.reset_password","title":"reset_password  <code>async</code>","text":"<pre><code>reset_password(encoded_token, password)\n</code></pre> <p>Reset a user's password given a valid JWT.</p> <p>Parameters:</p> Name Type Description Default <code>encoded_token</code> <code>str</code> <p>An encoded JWT bound to the password reset flow.</p> required <code>password</code> <code>SecretStr</code> <p>The new password to hash and store.</p> required <p>Raises:</p> Type Description <code>InvalidTokenException</code> <p>If the token has expired or been tampered with.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.pre_login_hook","title":"pre_login_hook  <code>async</code>","text":"<pre><code>pre_login_hook(data)\n</code></pre> <p>Execute custom logic to run custom business logic prior to authenticating a user.</p> <p>Useful for authorization checks against external sources, eg. current membership validity or blacklists, etc Must return <code>False</code> or raise a custom exception to cancel authentication.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>UserAuthSchema</code> <p>Authentication data transfer object.</p> required <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>If authentication should proceed</p> <code>False</code> <code>bool</code> <p>If authentication is not to proceed.</p> Notes <p>Uncaught exceptions in this method will break the authentication process.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.post_login_hook","title":"post_login_hook  <code>async</code>","text":"<pre><code>post_login_hook(user)\n</code></pre> <p>Execute custom logic to run custom business logic after authenticating a user.</p> <p>Useful for eg. updating a login counter, updating last known user IP address, etc.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserModelType</code> <p>The user who has authenticated.</p> required Notes <p>Uncaught exceptions in this method will break the authentication process.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.pre_registration_hook","title":"pre_registration_hook  <code>async</code>","text":"<pre><code>pre_registration_hook(data)\n</code></pre> <p>Execute custom logic to run custom business logic prior to registering a user.</p> <p>Useful for authorization checks against external sources, eg. membership API or blacklists, etc. Must return <code>False</code> or raise a custom exception to cancel registration.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>UserCreateDTOType</code> <p>User creation data transfer object</p> required <p>Returns:</p> Name Type Description <code>True</code> <code>bool</code> <p>If registration should proceed</p> <code>False</code> <code>bool</code> <p>If registration is not to proceed.</p> <p>Notes: - Uncaught exceptions in this method will result in failed registration attempts.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.post_registration_hook","title":"post_registration_hook  <code>async</code>","text":"<pre><code>post_registration_hook(user)\n</code></pre> <p>Execute custom logic to run custom business logic after registering a user.</p> <p>Useful for updating external datasets, sending welcome messages etc.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserModelType</code> <p>User ORM instance.</p> required <p>Notes: - Uncaught exceptions in this method could result in returning a HTTP 500 status code while successfully creating the user in the database. - It's possible to skip verification entirely by setting <code>user.is_verified</code> to <code>True</code> here.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.post_verification_hook","title":"post_verification_hook  <code>async</code>","text":"<pre><code>post_verification_hook(user)\n</code></pre> <p>Execute custom logic to run custom business logic after a user has verified details.</p> <p>Useful for eg. updating sales lead data, etc.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserModelType</code> <p>User ORM instance.</p> required <p>Notes: - Uncaught exceptions in this method could result in returning a HTTP 500 status code while successfully validating the user.</p>"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.get_role","title":"get_role  <code>async</code>","text":"<pre><code>get_role(id_)\n</code></pre> <p>Retrieve a role by id.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID</code> <p>UUID of the role.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.get_role_by_name","title":"get_role_by_name  <code>async</code>","text":"<pre><code>get_role_by_name(name)\n</code></pre> <p>Retrieve a role by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the role.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.add_role","title":"add_role  <code>async</code>","text":"<pre><code>add_role(data)\n</code></pre> <p>Add a new role to the database.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>RoleCreateDTOType</code> <p>A role creation data transfer object.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.update_role","title":"update_role  <code>async</code>","text":"<pre><code>update_role(id_, data)\n</code></pre> <p>Update a role in the database.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID</code> <p>UUID corresponding to the role primary key.</p> required <code>data</code> <code>RoleUpdateDTOType</code> <p>A role update data transfer object.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.delete_role","title":"delete_role  <code>async</code>","text":"<pre><code>delete_role(id_)\n</code></pre> <p>Delete a role from the database.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>UUID</code> <p>UUID corresponding to the role primary key.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.assign_role_to_user","title":"assign_role_to_user  <code>async</code>","text":"<pre><code>assign_role_to_user(user_id, role_id)\n</code></pre> <p>Add a role to a user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>UUID</code> <p>UUID of the user to receive the role.</p> required <code>role_id</code> <code>UUID</code> <p>UUID of the role to add to the user.</p> required"},{"location":"reference/1-user-service/#starlite_users.service.BaseUserService.revoke_role_from_user","title":"revoke_role_from_user  <code>async</code>","text":"<pre><code>revoke_role_from_user(user_id, role_id)\n</code></pre> <p>Revoke a role from a user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>UUID</code> <p>UUID of the user to revoke the role from.</p> required <code>role_id</code> <code>UUID</code> <p>UUID of the role to revoke.</p> required"},{"location":"reference/2-user-schema/","title":"User Schema","text":""},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserCreateDTO","title":"starlite_users.schema.BaseUserCreateDTO","text":"<p>         Bases: <code>BaseModel</code></p> <p>Base user create schema.</p>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserCreateDTO.email","title":"email  <code>class-attribute</code>","text":"<pre><code>email: str\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserCreateDTO.password","title":"password  <code>class-attribute</code>","text":"<pre><code>password: SecretStr\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserCreateDTO.is_active","title":"is_active  <code>class-attribute</code>","text":"<pre><code>is_active: Optional[bool]\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserCreateDTO.is_verified","title":"is_verified  <code>class-attribute</code>","text":"<pre><code>is_verified: Optional[bool]\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserReadDTO","title":"starlite_users.schema.BaseUserReadDTO","text":"<p>         Bases: <code>BaseModel</code></p> <p>Base user read schema.</p>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserReadDTO.email","title":"email  <code>class-attribute</code>","text":"<pre><code>email: str\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserReadDTO.is_active","title":"is_active  <code>class-attribute</code>","text":"<pre><code>is_active: bool\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserReadDTO.is_verified","title":"is_verified  <code>class-attribute</code>","text":"<pre><code>is_verified: bool\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserUpdateDTO","title":"starlite_users.schema.BaseUserUpdateDTO","text":"<p>         Bases: <code>BaseModel</code></p> <p>Base user update schema.</p>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserUpdateDTO.email","title":"email  <code>class-attribute</code>","text":"<pre><code>email: Optional[str]\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserUpdateDTO.password","title":"password  <code>class-attribute</code>","text":"<pre><code>password: Optional[SecretStr]\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserUpdateDTO.is_active","title":"is_active  <code>class-attribute</code>","text":"<pre><code>is_active: Optional[bool]\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserUpdateDTO.is_verified","title":"is_verified  <code>class-attribute</code>","text":"<pre><code>is_verified: Optional[bool]\n</code></pre>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserRoleReadDTO","title":"starlite_users.schema.BaseUserRoleReadDTO","text":"<p>         Bases: <code>BaseUserReadDTO</code></p> <p>Base user read schema that includes <code>roles</code>.</p>"},{"location":"reference/2-user-schema/#starlite_users.schema.BaseUserRoleReadDTO.roles","title":"roles  <code>class-attribute</code>","text":"<pre><code>roles: List[Optional[BaseRoleReadDTO]]\n</code></pre>"},{"location":"reference/3-role-schema/","title":"Role Schema","text":""},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleCreateDTO","title":"starlite_users.schema.BaseRoleCreateDTO","text":"<p>         Bases: <code>BaseModel</code></p> <p>Base role create schema.</p>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleCreateDTO.name","title":"name  <code>class-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleCreateDTO.description","title":"description  <code>class-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleReadDTO","title":"starlite_users.schema.BaseRoleReadDTO","text":"<p>         Bases: <code>BaseModel</code></p> <p>Base role read schema.</p>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleReadDTO.id","title":"id  <code>class-attribute</code>","text":"<pre><code>id: UUID\n</code></pre>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleReadDTO.name","title":"name  <code>class-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleReadDTO.description","title":"description  <code>class-attribute</code>","text":"<pre><code>description: str\n</code></pre>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleUpdateDTO","title":"starlite_users.schema.BaseRoleUpdateDTO","text":"<p>         Bases: <code>BaseModel</code></p> <p>Base role update schema.</p>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleUpdateDTO.name","title":"name  <code>class-attribute</code>","text":"<pre><code>name: Optional[str]\n</code></pre>"},{"location":"reference/3-role-schema/#starlite_users.schema.BaseRoleUpdateDTO.description","title":"description  <code>class-attribute</code>","text":"<pre><code>description: Optional[str]\n</code></pre>"},{"location":"reference/4-route-handler-configs/","title":"Route Handler Configurations","text":""},{"location":"reference/4-route-handler-configs/#starlite_users.config.AuthHandlerConfig","title":"starlite_users.config.AuthHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for user authentication route handlers.</p> <p>Passing an instance to <code>StarliteUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.AuthHandlerConfig.login_path","title":"login_path  <code>class-attribute</code>","text":"<pre><code>login_path: str = '/login'\n</code></pre> <p>The path for the user authentication/login route.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.AuthHandlerConfig.logout_path","title":"logout_path  <code>class-attribute</code>","text":"<pre><code>logout_path: str = '/logout'\n</code></pre> <p>The path for the logout route.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.AuthHandlerConfig.tags","title":"tags  <code>class-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.CurrentUserHandlerConfig","title":"starlite_users.config.CurrentUserHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the current-user route handler.</p> <p>Passing an instance to <code>StarliteUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.CurrentUserHandlerConfig.path","title":"path  <code>class-attribute</code>","text":"<pre><code>path: str = '/users/me'\n</code></pre> <p>The path to get or update the currently logged-in user.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.CurrentUserHandlerConfig.tags","title":"tags  <code>class-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.PasswordResetHandlerConfig","title":"starlite_users.config.PasswordResetHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the forgot-password and reset-password route handlers.</p> <p>Passing an instance to <code>StarliteUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.PasswordResetHandlerConfig.forgot_path","title":"forgot_path  <code>class-attribute</code>","text":"<pre><code>forgot_path: str = '/forgot-password'\n</code></pre> <p>The path for the forgot-password route.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.PasswordResetHandlerConfig.reset_path","title":"reset_path  <code>class-attribute</code>","text":"<pre><code>reset_path: str = '/reset-password'\n</code></pre> <p>The path for the reset-password route.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.PasswordResetHandlerConfig.tags","title":"tags  <code>class-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RegisterHandlerConfig","title":"starlite_users.config.RegisterHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the user registration route handler.</p> <p>Passing an instance to <code>StarliteUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RegisterHandlerConfig.path","title":"path  <code>class-attribute</code>","text":"<pre><code>path: str = '/register'\n</code></pre> <p>The path for the registration/signup route.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RegisterHandlerConfig.tags","title":"tags  <code>class-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RoleManagementHandlerConfig","title":"starlite_users.config.RoleManagementHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the role management route handlers.</p> <p>Passing an instance to <code>StarliteUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RoleManagementHandlerConfig.path_prefix","title":"path_prefix  <code>class-attribute</code>","text":"<pre><code>path_prefix: str = '/users/roles'\n</code></pre> <p>The prefix for the router path.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RoleManagementHandlerConfig.assign_role_path","title":"assign_role_path  <code>class-attribute</code>","text":"<pre><code>assign_role_path: str = '/assign'\n</code></pre> <p>The path for the role assignment router.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RoleManagementHandlerConfig.revoke_role_path","title":"revoke_role_path  <code>class-attribute</code>","text":"<pre><code>revoke_role_path: str = '/revoke'\n</code></pre> <p>The path for the role revokement router.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RoleManagementHandlerConfig.guards","title":"guards  <code>class-attribute</code>","text":"<pre><code>guards: list[Guard] = field(default_factory=list)\n</code></pre> <p>A list of callable Guards that determines who is authorized to manage roles.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.RoleManagementHandlerConfig.tags","title":"tags  <code>class-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.UserManagementHandlerConfig","title":"starlite_users.config.UserManagementHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for user management (read, update, delete) route handlers.</p> <p>Passing an instance to <code>StarliteUsersConfig</code> will automatically take care of handler registration on the app.</p> <p>Note: - These routes make use of Starlite <code>Guard</code>s to require authorization. Callers require admin or similar privileges.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.UserManagementHandlerConfig.path_prefix","title":"path_prefix  <code>class-attribute</code>","text":"<pre><code>path_prefix: str = '/users'\n</code></pre> <p>The prefix for the router path.</p> <p>By default, the path will be suffixed with <code>'/{id_:uuid}'</code>.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.UserManagementHandlerConfig.guards","title":"guards  <code>class-attribute</code>","text":"<pre><code>guards: list[Guard] = field(default_factory=list)\n</code></pre> <p>A list of callable Guards that determines who is authorized to manage other users.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.UserManagementHandlerConfig.tags","title":"tags  <code>class-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.VerificationHandlerConfig","title":"starlite_users.config.VerificationHandlerConfig  <code>dataclass</code>","text":"<p>Configuration for the user verification route handler.</p> <p>Passing an instance to <code>StarliteUsersConfig</code> will automatically take care of handler registration on the app.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.VerificationHandlerConfig.path","title":"path  <code>class-attribute</code>","text":"<pre><code>path: str = '/verify'\n</code></pre> <p>The path for the verification route.</p>"},{"location":"reference/4-route-handler-configs/#starlite_users.config.VerificationHandlerConfig.tags","title":"tags  <code>class-attribute</code>","text":"<pre><code>tags: list[str] | None = None\n</code></pre> <p>A list of string tags to append to the schema of the route handler(s).</p>"},{"location":"usage/0-configuration/","title":"Configuration","text":"<p>A few dependencies need to be configured before you can get started.</p>"},{"location":"usage/0-configuration/#user-and-role-models","title":"User and Role models","text":"<p>Model configuration is documented here.</p>"},{"location":"usage/0-configuration/#dtos","title":"DTOs","text":"<p>DTO configuration is documented here.</p>"},{"location":"usage/0-configuration/#the-user-service","title":"The user service","text":"<p>User service setup is documented here.</p>"},{"location":"usage/0-configuration/#setting-up-starliteusersconfig","title":"Setting up <code>StarliteUsersConfig</code>","text":"<p>Once the above is in place, all that's left is registering the desired route handlers and registering an instance of <code>StarliteUsers</code> on your Starlite application, as shown below:</p> <pre><code>from starlite import Starlite\nfrom starlite_users import StarliteUsers, StarliteUsersConfig\nfrom starlite_users.config import AuthHandlerConfig\n\nfrom my.models import User\nfrom my.schemas import UserReadDTO\n\nconfig = StarliteUsersConfig(\n    user_model=User, user_read_dto=UserReadDTO, auth_handler_config=AuthHandlerConfig()\n)\nstarlite_users = StarliteUsers(config=config)\n\napp = Starlite(\n    on_app_init=[starlite_users.on_app_init],\n    route_handlers=[],\n)\n</code></pre> <p>Note</p> <p>Aside from the pre-configured public routes provided by Starlite-Users, all the routes on your application will require authentication unless specified otherwise in StarliteUsersConfig.auth_exclude_paths</p> <p>Note</p> <p>Starlite-Users requires the use of a corresponding <code>Starlite</code> plugin for database management.</p>"},{"location":"usage/1-database-models/","title":"Database models","text":""},{"location":"usage/1-database-models/#the-user-model","title":"The user model","text":"<p>You must define and register an ORM <code>User</code> model for use with the data persistence layer. Generic mixins are provided to be subclassed and extended if needed. The user mixin provides the following default columns:</p> <ul> <li><code>id</code>: UUID</li> <li><code>email</code>: str</li> <li><code>password_hash</code>: str</li> <li><code>is_active</code>: bool</li> <li><code>is_verified</code>: bool</li> </ul>"},{"location":"usage/1-database-models/#sqlalchemy-user","title":"SQLAlchemy User","text":"<p>Important</p> <p>If you're using SQLAlchemy models, Starlite-Users is reliant on the SQLAlchemyPlugin for session management and dependency injection. This ensures that only a single session is created and used per request. Please see the Starlite documentation for setup directions.</p> <pre><code>from starlite_users.adapter.sqlalchemy.mixins import SQLAlchemyUserMixin\nfrom sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n\n\nclass User(Base, SQLAlchemyUserMixin):\n    __tablename__ = \"user\"\n</code></pre> <p>You can also declare arbitrary custom columns:</p> <pre><code>from starlite_users.adapter.sqlalchemy.mixins import SQLAlchemyUserMixin\nfrom sqlalchemy import Column, Integer\n\nfrom my.models.base import Base  # declarative_base class\n\n\nclass User(Base, SQLAlchemyUserMixin):\n    __tablename__ = \"user\"\n\n    token_count = Column(Integer())\n</code></pre>"},{"location":"usage/1-database-models/#the-role-model","title":"The role model","text":"<p>Required only if you wish to register administrative role management route handlers. You must also register a users-to-roles association table, since <code>user.roles</code> is a many-to-many relationship type.</p> <p>Note</p> <p>You must set your own <code>User.roles</code> relationship and association table, since this is dependent on your own <code>__tablename__</code> definitions.</p>"},{"location":"usage/1-database-models/#sqlalchemy-role","title":"SQLAlchemy Role","text":"<pre><code>from sqlalchemy.orm import relationship\nfrom starlite_users.adapter.sqlalchemy.mixins import (\n    SQLAlchemyUserMixin,\n    SQLAlchemyRoleMixin,\n)\n\nfrom my.models.base import Base  # declarative_base class\n\n\nclass User(Base, SQLAlchemyUserMixin):\n    __tablename__ = \"user\"\n\n    roles = relationship(\"Role\", secondary=\"user_role\", lazy=\"joined\")\n\n\nclass Role(Base, SQLAlchemyRoleMixin):\n    __tablename__ = \"role\"\n\n\nclass UserRole(Base):\n    __tablename__ = \"user_role\"\n</code></pre> <p>Just as with the user model, you can define arbitrary custom columns:</p> <pre><code>from datetime import datetime\n\nfrom starlite_users.adapter.sqlalchemy.mixins import SQLAlchemyRoleMixin\nfrom sqlalchemy import Column, DateTime\n\nfrom my.models.base import Base  # declarative_base class\n\n\nclass Role(Base, SQLAlchemyRoleMixin):\n    created_at = Column(DateTime(), default=datetime.now)\n</code></pre>"},{"location":"usage/2-data-transfer-objects/","title":"Data transfer objects (DTOs)","text":"<p>Starlite-Users provides base <code>pydantic</code> models to be subclassed and registered on <code>StarliteUsersConfig</code>. This is necessary to properly type the built-in route handlers, and by extension the OpenAPI documentation.</p>"},{"location":"usage/2-data-transfer-objects/#user-dtos","title":"User DTOs","text":"<p>You must set up the following 3 <code>User</code> models:</p> <pre><code>from starlite_users.schema import BaseUserCreateDTO, BaseUserReadDTO, BaseUserUpdateDTO\n\n\nclass UserCreateDTO(BaseUserCreateDTO):\n    pass\n\n\nclass UserReadDTO(BaseUserReadDTO):\n    pass\n\n\nclass UserUpdateDTO(BaseUserUpdateDTO):\n    pass\n</code></pre> <p>Or, if you added custom fields to your database models, for example <code>token_count</code> column:</p> <pre><code>from typing import Optional\n\nfrom starlite_users.schema import BaseUserCreateDTO, BaseUserReadDTO, BaseUserUpdateDTO\n\n\nclass UserCreateDTO(BaseUserCreateDTO):\n    token_count: int\n\n\nclass UserReadDTO(BaseUserReadDTO):\n    token_count: int\n\n\nclass UserUpdateDTO(BaseUserUpdateDTO):\n    token_count: Optional[int]\n</code></pre>"},{"location":"usage/2-data-transfer-objects/#role-dtos","title":"Role DTOs","text":"<p>These are only required if you wish to register administrative role management route handlers.</p> <pre><code>from starlite_users.schema import BaseRoleCreateDTO, BaseRoleReadDTO, BaseRoleUpdateDTO\n\n\nclass RoleCreateDTO(BaseRoleCreateDTO):\n    pass\n\n\nclass RoleReadDTO(BaseRoleReadDTO):\n    pass\n\n\nclass RoleUpdateDTO(BaseRoleUpdateDTO):\n    pass\n</code></pre> <p>Or, if you added custom fields to your database models, for example a <code>permissions</code> column:</p> <pre><code>from typing import Optional\n\nfrom starlite_users.schema import BaseRoleCreateDTO, BaseRoleReadDTO, BaseRoleUpdateDTO\n\n\nclass RoleCreateDTO(BaseRoleCreateDTO):\n    permissions: str\n\n\nclass RoleReadDTO(BaseRoleReadDTO):\n    permissions: str\n\n\nclass RoleUpdateDTO(BaseRoleUpdateDTO):\n    permissions: Optional[str]\n</code></pre>"},{"location":"usage/3-the-user-service/","title":"The user service class","text":"<p>The <code>UserService</code> class is the interface for all user and role related operations. The service must be subclassed and registered on the config.</p>"},{"location":"usage/3-the-user-service/#suggested-method-overrides","title":"Suggested method overrides","text":"<ul> <li><code>send_verification_token</code> You must define your own logic to email/sms the verification token to newly registered users.</li> <li><code>send_password_reset_token</code> You must define your own logic to email/sms password reset tokens to users.</li> </ul>"},{"location":"usage/3-the-user-service/#optional-method-overrides","title":"Optional method overrides","text":"<ul> <li><code>pre_login_hook</code> Optional. You may verify status against external sources such as an exclusive membership database in order to proceed with authentication. Must return a bool or raise custom exception.</li> <li><code>post_login_hook</code> Optional. Useful for example updating a user's login count, or sending 'online' notifications to friends, etc.</li> <li><code>pre_registration_hook</code> Optional. You may authorize the request against external sources such as an exclusive membership database in order to proceed with registration. Must return a bool or raise custom exception.</li> <li><code>post_registration_hook</code> Optional. Useful to set up sending of welcome messages, etc.</li> <li><code>post_verification_hook</code> Optional. Useful to update external sources after a user has verified their details.</li> </ul>"},{"location":"usage/3-the-user-service/#example","title":"Example","text":"<pre><code>from typing import Any\n\nfrom starlite_users.service import BaseUserService\n\nfrom local.models import User\nfrom local.schema import UserCreateDTO, UserUpdateDTO\nfrom local.services import CustomEmailService\n\n\nclass UserService(BaseUserService[User, UserCreateDTO, UserUpdateDTO, Any]):\n    async def send_verification_token(self, user: User, token: str) -&gt; None:\n        email_service = CustomEmailService()\n        email_service.send(\n            email=user.email,\n            message=f\"Thanks! Your verification link is https://mysite.com/verify?token={token}\",\n        )\n</code></pre> <p>Or, if you're making use of roles:</p> <pre><code>from starlite_users.service import BaseUserRoleService\n\nfrom local.models import User, Role\nfrom local.schema import UserCreateDTO, UserUpdateDTO\nfrom local.services import CustomEmailService\n\n\nclass UserService(BaseUserRoleService[User, UserCreateDTO, UserUpdateDTO, Role]):\n    async def send_verification_token(self, user: User, token: str) -&gt; None:\n        email_service = CustomEmailService()\n        email_service.send(\n            email=user.email,\n            message=f\"Thanks! Your verification link is https://mysite.com/verify?token={token}\",\n        )\n</code></pre>"},{"location":"usage/4-route-handler-configs/","title":"Route handler configs","text":"<p>Starlite-Users will take care of registering the provided route handlers on the application if the relevant configurations are passed to <code>StarliteUsersConfig</code>.</p> <p>All routes are configurable via these classes, though sensible defaults are provided in each case.</p> <p>The following configurations (and route handlers, by extension) are available:</p>"},{"location":"usage/4-route-handler-configs/#authhandlerconfig","title":"<code>AuthHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>login</code>: Allows users to authenticate.</li> <li><code>logout</code>: Allows authenticated users to logout. Not available when the authentication backend is JWT based.</li> </ul>"},{"location":"usage/4-route-handler-configs/#currentuserhandlerconfig","title":"<code>CurrentUserHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>get_current_user</code>: Get info on the currently authenticated user.</li> <li><code>update_current_user</code>: Update the currently authenticated user's info.</li> </ul>"},{"location":"usage/4-route-handler-configs/#passwordresethandlerconfig","title":"<code>PasswordResetHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>forgot_password</code>: Inititiates the password reset flow. Always returns a HTTP 2XX status code.</li> <li><code>reset_password</code>: Reset a user's password, given a valid reset token.</li> </ul>"},{"location":"usage/4-route-handler-configs/#registerhandlerconfig","title":"<code>RegisterHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>register</code> (aka signup). By default, newly registered users will need to verify their account before they can proceed to login.</li> </ul>"},{"location":"usage/4-route-handler-configs/#rolemanagementhandlerconfig","title":"<code>RoleManagementHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>create_role</code>: Create a new role.</li> <li><code>update_role</code>: Update a role.</li> <li><code>delete_role</code>: Delete a role from the database.</li> <li><code>assign_role_to_user</code>: Assign an existing role to an existing user.</li> <li><code>revoke_role_from_user</code>: Revoke an existing role from an existing user.</li> </ul>"},{"location":"usage/4-route-handler-configs/#usermanagementhandlerconfig","title":"<code>UserManagementHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>get_user</code>: Get a user's info.</li> <li><code>update_user</code>: Update a user's info.</li> <li><code>delete_user</code>: Delete a user from the database</li> </ul>"},{"location":"usage/4-route-handler-configs/#verificationhandlerconfig","title":"<code>VerificationHandlerConfig</code>","text":"<p>Provides the following route handlers:</p> <ul> <li><code>verify</code>: Update a user's <code>is_verified</code> status to <code>True</code>, given a valid token.</li> </ul>"},{"location":"usage/5-role-based-guards/","title":"Role based route guards","text":"<p>Starlite-Users provides the following guard provider functions that you may use on your own route handlers:</p> <ul> <li><code>roles_accepted</code>: The user must have at least one of the listed roles in order to access the resource.</li> <li><code>roles_required</code>: The user must have all the listed roles in order to access the resource.</li> </ul> <p>Example:</p> <pre><code>from typing import Any\n\nfrom starlite import get\nfrom starlite_users.guards import roles_accepted, roles_required\n\n\n@get(\"/sensitive-info\", guards=[roles_accepted(\"admin\", \"accountant\")])\ndef sensitive_info() -&gt; Any:\n\"\"\"Accessible only by users with admin or accountant roles.\"\"\"\n    ...\n\n\n@get(\"/super-sensitive-info\", guards=[roles_required(\"admin\", \"accountant\")])\ndef extra_sensitive_info() -&gt; Any:\n\"\"\"Accessible only by users with both admin and accountant roles.\"\"\"\n    ...\n</code></pre> <p>Important</p> <p>Usually, guard params in Starlite should not be invoked. We do invoke the <code>roles_accepted</code> and <code>roles_required</code> functions though, as they return functions which meet the requirements.</p>"}]}